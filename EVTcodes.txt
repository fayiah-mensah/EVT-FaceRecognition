#install.packages("actuar")
#install.packages("mice")
library("actuar")
library("mice")
library("ReIns")

### modified Hill estimator
"HillType"<-function(data,k)
{
  n<-length(data)
  sdata<-sort(data)
  EVI<-median(log(sdata[n:(n-k+1)])-log(sdata[n-k]))
  return(EVI)
}

### Geometric-type estimator
"Rkn"<-function(data,k)
{
  n<-length(data)
  sdata<-sort(data)
  Numerator<-sum((log(n/(1:k)))^2)-
    ((sum(log(n/(1:k))))^2)/k
  
  denom<-sum((log(sdata[n:(n-k)]))^2)-
    ((sum(log(sdata[n:(n-k)])))^2)/k    
  EVI<-sqrt(Numerator/denom)
  return(EVI)
}


## Generate a dataframe of the data
"data.fun"<-function(n,R,dist,shape,shape1=NA,
                     shape2=NA,scale=1)
{
  if(dist=="Pareto")
    {
    Data<-sapply(1:R,function(i)rpareto(n=n,
              shape=shape,scale = scale))
    gamma<-1/shape
  }else if(dist=="Frechet")
  {
    Data<-sapply(1:R,function(i)rfrechet(n=n,
                  shape=shape,scale = scale))
    gamma<-1/shape
  }else{
    Data<-sapply(1:R,function(i)actuar::rburr(n=n,shape1=shape1,
                            shape2=shape2,scale = scale))
    gamma<-1/(shape1*shape2)
  }
  
  Tab<-list(Data=Data,gamma=gamma)
  return(Tab)
}


### Imputation function ############


#prop=0.2;mech="MAR";Ncol=2
## pmis is percentage of missingness
## 
"IntroMis"<-function(prop,mech,data,Ncol)
{
  n<-length(data)
  #data[sample(1:n,round(pmis*n))]<-NA
  data<-matrix(data,ncol=Ncol)
  
  ## Divide proportion by 2 to get the required
  ## propostion of missingness in each column
  Data<-ampute(data, prop = prop/2,mech=mech) 
  rm(data)
  # Mat<-matrix(data,ncol=Ncol)
  ## Impute values for missing values
  imp <- mice(Data$amp)
  
  ## Use the median as the imputed value
  Impute.Val<-unlist(lapply(imp$imp,function(x)
  {
    apply(x,1,median)}))
  
  Imp.data<-c(na.exclude(as.vector(unlist(Data$amp))),
              Impute.Val)
  Mis.data<-na.exclude(as.vector(unlist(Data$amp)))
  return(list(MissingData= Mis.data,ImpData=Imp.data))
  
}


### MSE and Bias functions
"MSE.fun"<-function(x,gamma){mean((x-gamma)^2,na.rm=TRUE)}
"Bias.fun"<-function(x,gamma){abs(mean(x,na.rm=TRUE)-gamma)}

#########################################
## Computations of EVIs
############################################
## Without missingness

## Impute the parameters for simulation
dist="Burr"; prop=0.1; n=50; 


shape=2;scale=1;R=1000;
shape1=4; shape2=0.5; scale=1; mech="MAR"; a=5; b=0.75;Ncol=2




## Generate data from the parameters
Try<-data.fun(n=n,R=R,dist=dist,shape=2,shape1=shape1,shape2=shape2,scale=scale)

Mis.list<-apply(Try$Data,2,function(x)
  IntroMis(prop=prop,mech=mech,data=x,Ncol=Ncol))


### a. Hill type estimator function
EVI.H<-function(x)sapply(a:(b*n),
              function(k)HillType(x,k))


### b. Geometric type estimator function
EVI.G<-function(x)sapply(a:(b*n),function(k)1/Rkn(x,k))


#################################################
### EVIs for Missing Data
############################################

### Compute EVIs using Hill type estimator
EVI.Hill<-sapply(Mis.list,function(y)EVI.H(y$MissingData))

### Compute EVIs using Geometric type estimator
EVI.Geom<-sapply(Mis.list,function(y)EVI.G(y$MissingData))


#################################################
### EVIs for Imputed Data
############################################

## Compute EVIs using Hill type estimator
EVI.Hill.imp<-sapply(Mis.list,
          function(y)Hill(data=y$ImpData)$gamma[a:(b*n)])

### Compute EVIs using Geometric type estimator
EVI.Geom.imp<-sapply(Mis.list,function(y)EVI.G(y$ImpData))


### Combine all EVI types into a single list
EVI.list<-list(MHill=EVI.Hill,
               Geom=EVI.Geom,
               I.Hill=EVI.Hill.imp,
               I.Geom=EVI.Geom.imp)


#### Compute Bias and MSE for at each k
Bias<-lapply(EVI.list, function(x)
  apply(x,1,function(y)Bias.fun(y,gamma=Try$gamma))
  )
MSE<-lapply(EVI.list, function(x)
  apply(x,1,function(y)MSE.fun(y,gamma=Try$gamma))
)

par(mar=c(4,4,1,1))

### Plot of Bias
plot(Bias$MHill,type="l",xlab="k",lwd=2,
     ylab="|Bias|",lty=1,ylim=c(0,0.2))
sapply(2:length(Bias),
 function(j)lines(Bias[[j]],lty=j,col=j,lwd=2))
legend("topright",legend=c("M_Hill","Geom",
                           "Im.Hill","Im.Geom"),
       lty=1:4,col=1:4)

### Plot of MSE
plot(MSE$MHill,type="l",xlab="k",ylab="MSE",lwd=2,
     lty=1,ylim=c(0,0.1))
sapply(2:length(MSE),
       function(j)lines(MSE[[j]],lty=j,col=j,lwd=2))
legend("topright",legend=c("M_Hill","Geom",
                          "Im.Hill","Im.Geom"),
       lty=1:4,col=1:4)

